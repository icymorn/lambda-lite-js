{"name":"Lambda-lite-js | 微型函数式语言","tagline":"a tiny FUNCITONAL LANGUAGE implemented by javascript. 一个函数式语言，使用 js 实现。","body":"# Lambda-Lite-js\r\na tiny FUNCITONAL LANGUAGE implemented by javascript.\r\n\r\n## Support\r\n\r\n* lambda function\r\n* various declaration\r\n* function calling\r\n\r\n## Tutorial\r\n\r\n### lambda function\r\n\r\nUsing back splash and arrow to declear an anyoumous function. Lambda function only accept one parameter, but you can use some magic method to break this limit.\r\n\r\n```haskell\r\n\\n -> n + 1;\r\n\\n -> n * n;\r\n\\n -> n + n * n;\r\n```\r\n\r\nCreating function which accepts two parameters.\r\n\r\n```haskell\r\n(\\n -> \\m -> m + n) 1 2 --- output: 3\r\n```\r\n### various declaration\r\n\r\nThe keyword `let` leads an assignment.\r\n\r\n```haskell\r\nlet x = 5;\r\nlet y = \\n -> n + 1;\r\n```\r\n\r\n### binary condition\r\n\r\nThe binary condition is in form of `if ... then ... else ...`.\r\n\r\n```haskell\r\nprint (if true then 1 else 0)\r\n--- output: 1\r\n```\r\n\r\n### native function\r\n\r\nnow some native functions are accessiable. As well as the basic calculation operators: `+-*/`.\r\n\r\n```haskell\r\nprint \"hello\";\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}